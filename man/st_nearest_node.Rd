% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nearest.R
\name{st_nearest_node}
\alias{st_nearest_node}
\alias{st_nearest_node.sf}
\alias{st_nearest_node.sfc}
\title{Snap geospatial points to their nearest node on the network}
\usage{
st_nearest_node(x, y, tolerance = Inf, geometries = TRUE)

\method{st_nearest_node}{sf}(x, y, tolerance = Inf, geometries = TRUE)

\method{st_nearest_node}{sfc}(x, y, tolerance = Inf, geometries = TRUE)
}
\arguments{
\item{x}{The spatial features to be snapped, either as object of class
\code{\link[sf]{sf}} or \code{\link[sf]{sfc}}.}

\item{y}{The network to be snapped to as object object of class
\code{\link{sfnetwork}}.}

\item{tolerance}{The tolerance distance to be used. Only features that are
at least as close to the network as the tolerance distance will be snapped.
For all other features, an empty geometry will be returned. Should be a
non-negative number preferably given as an object of class 
\code{\link[units]{units}}. Otherwise, it will be assumed that the unit is 
meters. If set to \code{Inf} all features will be snapped. Defaults to 
\code{Inf}.}

\item{geometries}{Should the geometries of nearest nodes be returned? If
set to \code{FALSE}, indices of nearest nodes are returned instead. 
Defaults to \code{TRUE}.}
}
\value{
If \code{geometries=TRUE}: an object of class \code{\link[sf]{sfc}}, 
containing the snapped geometries of x. Empty geometries are returned for
all features in x that are outside the given tolerance distance.
If \code{geometries=FALSE}: an numeric vector containing the indices of the 
nearest node to each feature in x. NA's are returned for all geometries in x 
outside the given tolerance distance.
}
\description{
Wrapper around \code{\link[sf]{st_nearest_feature}} to find the nearest
node in a spatial network to a given set of input geometries. In theory, 
the input geometries can be of any geometry type, but it is recommended 
to only provide geometries of type \code{POINT}, for example by first
calculating the centroid of other geometry types.
}
\details{
For snapping to the nearest point on the nearest edge instead, 
first blend the features in x into the network using \code{\link{st_blend}}, 
and then call \code{st_nearest_node}.
}
