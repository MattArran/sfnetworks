% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shortest_paths.R
\name{st_network_paths}
\alias{st_network_paths}
\title{Shortest paths between points in geographical space}
\usage{
st_network_paths(
  x,
  from,
  to = igraph::V(x),
  weights = NULL,
  output = "both",
  all = FALSE,
  ...
)
}
\arguments{
\item{x}{An object of class \code{\link{sfnetwork}}.}

\item{from}{The geospatial point from which the shortest paths will be
calculated. Can be an object an object of class \code{\link[sf]{sf}} or
\code{\link[sf]{sfc}}, containing a single feature. When multiple features
are given, only the first one is taken. Empty geometries are ignored.
Alternatively, it can be a numeric constant, referring to the index of the
node from which the shortest paths will be calculated.}

\item{to}{The (set of) geospatial point(s) to which the shortest paths will be
calculated. Can be an object of  class \code{\link[sf]{sf}} or
\code{\link[sf]{sfc}}. Empty geometries will be ignored.
Alternatively, it can be a numeric vector, containing the indices of the nodes
to which the shortest paths will be calculated. By default, all nodes in the
network are included.}

\item{weights}{The edge weights to be used in the shortest path calculation.
Can be a numeric vector giving edge weights, or a column name referring to
an attribute column in the edges table containing those weights. If set to
\code{NULL}, the values of a column named 'weight' in the edges table will
be used automatically, as long as this column is present. If set to
\code{NA}, no weights are used (even if the edges have a weight column).}

\item{output}{Character defining how to report the shortest paths. Can be
\code{'nodes'} meaning that only indices of nodes in the paths are
returned, \code{'edges'} meaning that only indices of edges in the paths
are returned, or \code{'both'} meaning that both node and edge indices are
returned. Defaults to \code{'both'}. Ignored when \code{all = TRUE}.}

\item{all}{Whether to calculate all shortest paths or a single shortest path
between two nodes. If \code{TRUE}, the igraph function 
\code{all_shortest_paths} is called internally, if \code{FALSE} the igraph
function \code{shortest_paths} is called internally. Defaults to \code{FALSE}.}

\item{...}{Arguments passed on to the corresponding
\code{\link[igraph:shortest_paths]{igraph}} function. Arguments
\code{predecessors} and \code{inbound.edges} are ignored.}
}
\value{
An object of class \code{\link[tibble]{tbl_df}} with one row per
returned path. Depending on the setting of the 'output' argument, columns
can be \code{node_paths} (a list column with for each path the ordered
indices of nodes present in that path) and \code{edge_paths} (a list column
with for each path the ordered indices of edges present in that path).
}
\description{
Wrappers around the shortest path calculation functionalities in
\code{\link[igraph:shortest_paths]{igraph}}, allowing to
provide any geospatial point as `from` argument and any set of geospatial
points as `to` argument. If such a geospatial point is not equal to a node
in the network, it will be snapped to its nearest node before calculating
the shortest paths.
}
\details{
See the \code{\link[igraph:shortest_paths]{igraph}} documentation.
}
\examples{
library(sf)
library(tidygraph)

net = as_sfnetwork(roxel, directed = FALSE) \%>\%
  st_transform(3035)

# 1. Providing node indices

st_network_paths(net, 1, 9)

# 2. Providing nodes as spatial points

p1 = st_geometry(net, "nodes")[1]
p2 = st_geometry(net, "nodes")[9]
st_network_paths(net, p1, p2)

# 3. Providing spatial points outside of the network

p3 = st_sfc(p1[[1]] + st_point(c(500, 500)), crs = st_crs(p1))
p4 = st_sfc(p2[[1]] + st_point(c(-500, -500)), crs = st_crs(p2))
st_network_paths(net, p3, p4)

# 4. Providing weights from column name

net \%>\%
  activate("edges") \%>\%
  mutate(length = edge_length()) \%>\%
  st_network_paths(p1, p2, weights = "length")

# 5. Providing weights from column named 'weight'

net \%>\%
  activate("edges") \%>\%
  mutate(weight = edge_length()) \%>\%
  st_network_paths(p1, p2)

# 6. Calculate all shortest paths between two points

st_network_paths(net, 5, 1, all = TRUE)

}
\seealso{
\code{\link{st_network_cost}}
}
