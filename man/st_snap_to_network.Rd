% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/snap.R
\name{st_snap_to_network}
\alias{st_snap_to_network}
\title{Update geometries to their nearest point on the network}
\usage{
st_snap_to_network(x, graph, method = "nearest_node", tolerance = Inf)
}
\arguments{
\item{x}{The spatial features to be snapped, either as object of class
\code{\link[sf]{sf}} or \code{\link[sf]{sfc}}.}

\item{graph}{The network to be snapped to as object object of class
\code{\link{sfnetwork}}.}

\item{method}{The snapping technique to be used. See details. Defaults to
\code{'nearest_node'}.}

\item{tolerance}{The tolerance distance to be used. Only features that are
at least as close to the network as the tolerance distance will be snapped.
For all other features, an empty geometry will be returned. Should be a
non-negative number preferably given as an object of class
\code{\link[units]{units}}. Otherwise, it will be assumed that the unit is
meters. If set to \code{Inf} all features will be snapped. Defaults to
\code{Inf}.}
}
\value{
An object of class \code{\link[sf]{sfc}}, containing the snapped
geometries of x.
}
\description{
Implementation of snapping techniques that find the nearest points on a
spatial network to a given set of input geometries. In theory, the
input geometries can be of any geometry type, but it is recommended to
only provide geometries of type \code{POINT}, for example by first
calculating the centroid of other geometry types.
}
\details{
Implemented snapping techniques are.
\itemize{
\item \code{'nearest_node'}: Find the nearest node to the given features.
\item \code{'nearest_point_on_edge'}: Finds the nearest point on the nearest
edge to the given features. This technique requires spatially explicit edges.
}
}
