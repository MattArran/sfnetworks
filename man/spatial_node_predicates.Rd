% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/node.R
\name{spatial_node_predicates}
\alias{spatial_node_predicates}
\alias{node_intersects}
\alias{node_is_disjoint}
\alias{node_touches}
\alias{node_is_within}
\alias{node_equals}
\alias{node_is_covered_by}
\alias{node_is_within_distance}
\title{Query nodes with spatial predicates}
\usage{
node_intersects(y, ...)

node_is_disjoint(y, ...)

node_touches(y, ...)

node_is_within(y, ...)

node_equals(y, ...)

node_is_covered_by(y, ...)

node_is_within_distance(y, ...)
}
\arguments{
\item{y}{The geospatial features to test the nodes against, either as an
object of class \code{\link[sf]{sf}} or \code{\link[sf]{sfc}}.}

\item{...}{Arguments passed on to the corresponding spatial predicate
function of sf. See \code{\link[sf]{geos_binary_pred}}.}
}
\value{
A logical vector of the same length as the number of nodes in the 
network.
}
\description{
These functions allow to interpretate spatial relations between nodes and
other geospatial features directly inside \code{\link[tidygraph]{filter}} 
and \code{\link[tidygraph]{mutate}} calls. All functions return a logical 
vector of the same length as the number of nodes in the network. Element i
in that vector is \code{TRUE} whenever \code{any(predicate(x[i], y[j]))} is
\code{TRUE}. Hence, in the case of using \code{node_intersects}, element i
in the returned vector is \code{TRUE} when node i intersects with any of 
the features given in y.
}
\details{
See \code{\link[sf]{geos_binary_pred}} for details on each spatial
predicate. Just as with all query functions in tidygraph, spatial node 
measures are meant to be called inside tidygraph verbs such as 
\code{\link[tidygraph]{mutate}} or \code{\link[tidygraph]{filter}}, where 
the network that is currently being worked on is known and thus not needed 
as an argument to the function. If you want to use an algorithm outside of
the tidygraph framework you can use \code{\link[tidygraph]{with_graph}} to 
set the context temporarily while the algorithm is being evaluated.
}
