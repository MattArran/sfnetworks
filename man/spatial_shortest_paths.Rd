% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shortest_paths.R
\name{spatial_shortest_paths}
\alias{spatial_shortest_paths}
\alias{st_shortest_paths}
\alias{st_all_shortest_paths}
\alias{st_network_distance}
\title{Shortest paths between points in geographical space}
\usage{
st_shortest_paths(x, from, to = V(x), weights = NULL, ...)

st_all_shortest_paths(x, from, to = V(x), weights = NULL)

st_network_distance(x, from = V(x), to = V(x), weights = NULL, ...)
}
\arguments{
\item{x}{An object of class \code{\link{sfnetwork}}.}

\item{from}{The geospatial point from which the shortest paths will be
calculated. Can be an object an object of class \code{\link[sf]{sf}} or
\code{\link[sf]{sfc}}, containing a single feature. When multiple features
are given, only the first one is taken.
Alternatively, it can be a numeric constant, referring to the index of the
node from which the shortest paths will be calculated. Only in the case of
\code{st_network_distances} the restriction of a single feature does not
apply. Then, it can also be an \code{\link[sf]{sf}} or \code{\link[sf]{sfc}}
object with multiple features, or alternatively a vector of node indices.}

\item{to}{The (set of) geospatial point(s) to which the shortest paths will be
calculated. Can be an object of  class \code{\link[sf]{sf}} or
\code{\link[sf]{sfc}}.
Alternatively, it can be a numeric vector, containing the indices of the nodes
to which the shortest paths will be calculated. By default, all nodes in the
network are included.}

\item{weights}{The edge weights to be used in the shortest path calculation.
Can be a numeric vector giving edge weights, or a column name referring to
an attribute column in the edges table containing those weights. If set to
\code{NULL}, the values of a column named 'weight' in the edges table will
be used automatically, as long as this column is present. If set to
\code{NA}, no weights are used (even if the edges have a weight column).}

\item{...}{Arguments passed on to the corresponding
\code{\link[igraph:shortest_paths]{igraph}} function.}
}
\value{
The return value is the same as for the corresponding \code{igraph}
function, see \code{\link[igraph:shortest_paths]{here}}.
}
\description{
Wrappers around the shortest path calculation functionalities in
\code{\link[igraph:shortest_paths]{igraph}}, allowing to
provide any geospatial point as `from` argument and any set of geospatial
points as `to` argument. If such a geospatial point is not equal to a node
in the network, it will be snapped to its nearest node before calculating
the shortest paths.
}
\details{
See the \code{\link[igraph:shortest_paths]{igraph}} documentation.
}
\section{Functions}{
\itemize{
\item \code{st_shortest_paths}: Wrapper around
\code{igraph::shortest_paths}.

\item \code{st_all_shortest_paths}: Wrapper around
\code{igraph::all_shortest_paths}.

\item \code{st_network_distance}: Wrapper around \code{igraph::distances}.
}}

\examples{
library(sf)
library(tidygraph)

net = st_transform(as_sfnetwork(roxel, directed = FALSE), 3035)

# 1. providing node indices

st_shortest_paths(net, 1, 9)

# 2. providing nodes as spatial points

p1 = st_geometry(net, "nodes")[1]
p2 = st_geometry(net, "nodes")[9]
st_shortest_paths(net, p1, p2)

# 3. providing spatial points outside of the network

p3 = st_sfc(p1[[1]] + st_point(c(500, 500)), crs = st_crs(p1))
p4 = st_sfc(p2[[1]] + st_point(c(-500, -500)), crs = st_crs(p2))
st_shortest_paths(net, p3, p4)

# 4. Providing weights from column name

net = net \%>\%
  activate("edges") \%>\%
  mutate(length = sf::st_length(.))
st_shortest_paths(net, p1, p2, weights = "length")

# 5. Providing weights from column named 'weight'

net = net \%>\%
  activate("edges") \%>\%
  mutate(weight = length)
st_shortest_paths(net, p1, p2)


## Calculate all shortest paths between two points

st_all_shortest_paths(net, 5, 1)


## Calculate a distance matrix

ps1 = c(st_geometry(p1), st_sfc(p3))
ps2 = c(st_geometry(p2), st_sfc(p4))

st_network_distance(net, ps1, ps2)

}
